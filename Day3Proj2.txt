Repo Link
---------
https://github.com/lokeshwaran1310/day3project2phase1/tree/main

Project Structure
-----------------

src/
  main/
    java/
      interfaces/
        Reportable.java
      main/
        IssueTrackerApplication.java
      models/
        bug.java
        issue.java
        task.java
      com/
        day3project2phase1/
          App.java
  test/
    java/
      com/
        day3project2phase1/
          AppTest.java


Reportable.java
---------------

package interfaces;

public interface  Reportable {
    public void reportstatus();
}


issue.java
----------

package models;

import interfaces.Reportable;

public class issue implements Reportable{
    private int id;
    private String title;
    private String desc;
    private String raisedperson;
    private String status;
    public issue(int id,String title,String raisedperson,String desc){
        this.id=id;
        this.title=title;
        this.desc=desc;
        this.raisedperson=raisedperson;
        this.status="Open";
    }
    public int getId() {
        return id;
    }
    public String getTitle() {
        return title;
    }
    public String getDesc() {
        return desc;
    }
    public String getRaisedperson() {
        return raisedperson;
    }
    public String getStatus() {
        return status;
    }
    public void closestat(){
        this.status="Closed";
    }
    public void display(){
        System.out.println("Issue Id: "+getId());
        System.out.println("Issue Title: "+getTitle());
        System.out.println("Issue Description: "+getDesc());
        System.out.println("Issue Status: "+getStatus());
        System.out.println("Ticket Raised By: "+getRaisedperson());
        System.out.println("---------------------------------------------------------");
        
    }
    @Override
  public void reportstatus(){
  }
}

bug.java
--------

package models;

import interfaces.Reportable;

public class bug extends issue implements Reportable {  
    private String severity;
    public bug(int id, String title, String raisedperson, String desc,String severity) {
        super(id, title, raisedperson, desc);
        this.severity=severity;
    }
    public String getSeverity() {
        return severity;
    }
    
    @Override
    public void display(){
         super.display();
    }
    @Override
    public void reportstatus(){
        System.out.println("Issue ID: "+getId()+" Severity Level: "+getSeverity()+" Status: "+getStatus());
    }

    
}


task.java
---------

package models;

import interfaces.Reportable;

public class task extends issue implements Reportable{
   private String assignedto;
   private String duedate;
    public task(int id, String title, String raisedperson, String desc,String assignedto,String duedate) {
        super(id, title, raisedperson, desc);
        this.assignedto=assignedto;
        this.duedate=duedate;
    }
    public String getAssignedto() {
        return assignedto;
    }
    public String getDuedate() {
        return duedate;
    }
    @Override
    public void display(){
        super.display();
    }
    @Override
    public void reportstatus(){
          System.out.println("Issue ID: "+getId()+" Assigned To: "+getAssignedto()+" Status: "+getStatus());
    }
   

}


IssueTrackerApplication.java
----------------------------

package main;

import java.util.ArrayList;
import java.util.List;

import models.bug;
import models.issue;
import models.task;

public class IssueTrackerApplication {
    public static void main(String[]args){
        List<issue> l=new ArrayList<>();
        l.add(new bug(100,"ui issue","Lokesh","sometimes ui is not responding properly","medium"));
        l.get(0).closestat();
        l.add(new bug(101,"firewall issue","hari","it allows spam websites to intrude","high"));
        l.add(new bug(102,"vpn issue","adrin","Disconnects often","low"));
        l.add(new task(103,"Setup Logging","Lokesh","configure SLF4J and Logback for console and file outputs","Developer1","25-07-2025"));
        l.add(new task(104,"Enable Debug Mode","hari","iactivate debug flag to print SQL queries at runtime","Developer2","24-07-2025"));
        l.get(4).closestat();
        l.add(new task(105,"Send Test Email","adrin"," trigger the email service to send a welcome message to test@xyz.com","Developer3","26-07-2025"));
        System.out.println("DETAILS: ");
        for(issue ent:l){
            ent.display();
        }
        System.out.println("REPORT: ");
        for(issue ent:l){
           ent.reportstatus();
        }
        System.out.println("---------------------------------------------------------");

    }
}


.gitignore
----------

echo ".idea/
target/
*.iml
*.class
*.jar
*.war
*.log
*.tmp
.DS_Store"

Output
------

DETAILS: 
Issue Id: 100
Issue Title: ui issue
Issue Description: sometimes ui is not responding properly
Issue Status: Closed
Ticket Raised By: Lokesh
---------------------------------------------------------
Issue Id: 101
Issue Title: firewall issue
Issue Description: it allows spam websites to intrude
Issue Status: Open
Ticket Raised By: hari
---------------------------------------------------------
Issue Id: 102
Issue Title: vpn issue
Issue Description: Disconnects often
Issue Status: Open
Ticket Raised By: adrin
---------------------------------------------------------
Issue Id: 103
Issue Title: Setup Logging
Issue Description: configure SLF4J and Logback for console and file outputs
Issue Status: Open
Ticket Raised By: Lokesh
---------------------------------------------------------
Issue Id: 104
Issue Title: Enable Debug Mode
Issue Description: iactivate debug flag to print SQL queries at runtime
Issue Status: Closed
Ticket Raised By: hari
---------------------------------------------------------
Issue Id: 105
Issue Title: Send Test Email
Issue Description:  trigger the email service to send a welcome message to test@xyz.com        
Issue Status: Open
Ticket Raised By: adrin
---------------------------------------------------------
REPORT:
Issue ID: 100 Severity Level: medium Status: Closed
Issue ID: 101 Severity Level: high Status: Open
Issue ID: 102 Severity Level: low Status: Open
Issue ID: 103 Assigned To: Developer1 Status: Open
Issue ID: 104 Assigned To: Developer2 Status: Closed
Issue ID: 105 Assigned To: Developer3 Status: Open
---------------------------------------------------------

README.md
---------

üìò Issue Tracker Console Application

üìÑ Description
A Java console application that manages bug and task issues to demonstrate core OOP principles: inheritance, abstraction, interface-based polymorphism, and method overriding. It uses a List<Issue> to store mixed objects and interface casting to call reportstatus() uniformly.

üß© Components
IssueTrackerApplication.java ‚Äì Main class; creates bug and task objects, adds them to a list, then displays and reports them.
Issue (Base Class) ‚Äì Implements Reportable; contains common fields (id, title, desc, raisedPerson, status), a display() method, and a default (no-op) reportstatus() to be optionally overridden.
bug (Subclass of Issue) ‚Äì Adds severity; overrides reportstatus() to display severity-specific status.
task (Subclass of Issue) ‚Äì Adds fields like assignedTo and dueDate; overrides reportstatus() to show assignment and status details.
Reportable (Interface) ‚Äì Declares the reportstatus() method, ensuring consistent status-reporting capabilities across all issue types. Interfaces promote loose coupling and code extensibility.

üéØ Purpose
To demonstrate fundamental Java OOP and design concepts by:
Using inheritance to share behavior between issues and their subtypes.
Applying method overriding for polymorphic behavior.
Leveraging interface-based polymorphism through the Reportable interface.
Managing heterogeneous objects with Java Collections (List<Issue>) and iterating through mixed types.

üèóÔ∏è Design Highlights
Interface implementation in base class: Issue implements Reportable with a default no-op method, allowing subclasses to override as needed.
Run-time polymorphism: Calling reportstatus() on Reportable references dynamically invokes the correct subclass method.
Collections & casting: Uses List<Issue> to process different object types uniformly, illustrating type abstraction and iteration across mixed instances.

üë§ Author
Name: Lokeshwaran M
Email: lokeshwaran.m@epssw.com
Date: July 2025




